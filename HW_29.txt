#1
import math
from abc import ABC, abstractmethod

#1
class shape(ABC):
    @abstractmethod
    def __init__(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass

    @abstractmethod
    def area(self):
        pass

#2
class circle(shape):

    def __init__(self, r):
        if r>0:
            self.r=r
        else:
            raise ValueError
        
    def perimeter(self):
        return 2 * math.pi * self.r
 
    def area(self):
        return math.pi * self.r**2


#3

class rectangle(shape):

    def __init__(self, lenght, width):

        if lenght>0 and width>0:
            self.lenght=lenght
            self.width=width
        else:
            raise ValueError
        
    def perimeter(self):
        return (self.lenght + self.width) * 2
    
    def area(self):
        return self.lenght * self.width


#4

class trianlge(shape):

    def __init__(self, side1, side2, side3):
        if (side1 + side2> side3) or (side2 + side3 >side1) or (side1 +side3> side2):
            self.side1=side1
            self.side2=side2
            self.side3=side3
        else:
            raise ValueError
        
    def perimeter(self):
        p=self.side1 + self.side2 + self.side3
        return p
    
    def area(self):
        s = self.perimeter() / 2
        return  (s * (s -self.side1 ) * (s - self.side2) * (s - self.side3)) * 0.5
        
trianlge_1=trianlge(3,4,5)

print(trianlge_1.perimeter())
print(trianlge_1.area())
       


# circle_1=circle(3)

# print(circle_1.perimeter())
# print(circle_1.area())
# rectangle_1=rectangle(3,4)
# print(rectangle_1.perimeter())
# print(rectangle_1.area())