class Calculator():

    def __init__(self, number ):
        if isinstance(number, int | float ):
            self.__number=number
        else:
            raise ValueError
    
    @property
    def number(self):
        return self.__number
    
    
    def __add__(self, other):
        if isinstance(other, Calculator):
            return self.__number + other.number
        else:
            return self.__number + other
        


    def __sub__(self, other):
        if isinstance(other, Calculator):
            return self.__number - other.number
        else:
            return self.__number - other
        
    def __mul__(self, other):
        if isinstance(other, Calculator):
            return self.__number * other.number
        else:
            return self.__number * other
        
    def __truediv__(self, other):
        if isinstance(other, Calculator):
            return self.__number / other.number
        else:
            return self.__number / other
        

    def __floordiv__(self, other):
        if isinstance(other, Calculator):
            return self.__number // other.number
        else:
            return self.__number // other
    
    def __mod__(self, other):
        if isinstance(other, Calculator):
            return self.__number % other.number
        else:
            return self.__number % other
    
    def __pow__(self, other):
        if isinstance(other, Calculator):
            return self.__number ** other.number
        else:
            return self.__number ** other
    

    def __iadd__(self, other):
        if isinstance(other, Calculator):
            self.__number += other.number
        else:
            self.__number += other
        return self


    def __isub__(self, other):
        if isinstance(other, Calculator):
            self.__number -= other.number
        else:
            self.__number -= other
        return self


    def __imul__(self, other):
        if isinstance(other, Calculator):
            self.__number *= other.number
        else:
            self.__number *= other
        return self


    def __itruediv__(self, other):
        if isinstance(other, Calculator):
            self.__number /= other.number
        else:
            self.__number /= other
        return self
    
    def __ifloordiv__(self, other):
        if isinstance(other, Calculator):
            self.__number //= other.number
        else:
            self.__number //= other
        return self

    def __imod__(self, other):
        if isinstance(other, Calculator):
            self.__number %= other.number
        else:
            self.__number %= other
        return self
    
    def __ipow__(self, other):
        if isinstance(other, Calculator):
            self.__number **= other.number
        else:
            self.__number **= other
        return self


    def __eq__(self, other):
        if isinstance(other, Calculator):
            return self.__number == other.number
        return self.__number == other

    def __gt__(self, other):
        if isinstance(other, Calculator):
            return self.__number == other.number
        return self.__number == other

    def __ge__(self, other):
        if isinstance(other, Calculator):
            return self.__number == other.number
        return self.__number == other


    def __it__(self, other):
        if isinstance(other, Calculator):
            return self.__number == other.number
        return self.__number == other


    def __le__(self, other):
        if isinstance(other, Calculator):
            return self.__number == other.number
        return self.__number == other



    def __ne__(self, other):
        if isinstance(other, Calculator):
            return self.__number == other.number
        return self.__number == other
    

    
    def __str__(self):
        return f"{self.number}"

    def __repr__(self):
        return f" number: {self.number}: type of number: {type(self.number)}"



calcolate1=Calculator(4)
    
calcolate2=Calculator(5)


# print(calcolate2.number)


# calcolate1 += calcolate2

# print(calcolate1.number)
# print(calcolate1==calcolate2)



# print(str(calcolate1))
# print(repr(calcolate2))